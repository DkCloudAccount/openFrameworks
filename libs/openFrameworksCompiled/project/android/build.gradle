final ofRoot = '../../../../'
final ofSource = ofRoot + 'libs/openFrameworks'
final addons = ofRoot + 'addons'
final libs = ofRoot + 'libs'

final APP_ABIS = ["armeabi", "armeabi-v7a", "x86"]




// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.7.0-alpha1'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: "com.android.model.native"




model {
    android {
        compileSdkVersion 22

        ndk {
            moduleName "openFrameworksLib"
            toolchain "clang"


            CFlags.addAll([
                    "-gcc-toolchain /Users/jonas/Library/Android/sdk/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/",

            ])
            cppFlags.addAll(["-std=c++14",
                             "-Wall",
                             "-frtti",
                             "-fexceptions",
                             "-nostdlib ",
                             "-fno-short-enums",
                             "-ffunction-sections",
                             "-fdata-sections",

                             "-I/Users/jonas/Development/Android/android-ndk-r10e/platforms/android-19/arch-arm//usr/include/",
                             "-I/Users/jonas/Development/Android/android-ndk-r10e/sources/android/support/include",

                             "-I${file(ofSource+"/3d")}".toString(),
                             "-I${file(ofSource+"/app")}".toString(),
                             "-I${file(ofSource+"/communication")}".toString(),
                             "-I${file(ofSource+"/events")}".toString(),
                             "-I${file(ofSource+"/gl")}".toString(),
                             "-I${file(ofSource+"/graphics")}".toString(),
                             "-I${file(ofSource+"/math")}".toString(),
                             "-I${file(ofSource+"/output")}".toString(),
                             "-I${file(ofSource+"/sound")}".toString(),
                             "-I${file(ofSource+"/types")}".toString(),
                             "-I${file(ofSource+"/utils")}".toString(),
                             "-I${file(ofSource+"/video")}".toString(),

                             "-I${file(libs+"/glu/include_android")}".toString(),

                             "-I${file(ofRoot+"/addons/ofxAndroid/src")}".toString(),
                             "-I${file(ofRoot+"/addons/ofxAccelerometer/src")}".toString(),


                             "-I${file(libs+"/FreeImage/include")}".toString(),
                             "-I${file(libs+"/boost/include")}".toString(),
                             "-I${file(libs+"/boost/include/boost")}".toString(),
                             "-I${file(libs+"/cairo/include")}".toString(),
                             "-I${file(libs+"/cairo/include/cairo")}".toString(),
                             "-I${file(libs+"/freetype/include")}".toString(),
                             "-I${file(libs+"/freetype/include/freetype2")}".toString(),
                             "-I${file(libs+"/freetype/include/freetype2/config")}".toString(),
                             "-I${file(libs+"/freetype/include/freetype2/internal")}".toString(),
                             "-I${file(libs+"/freetype/include/freetype2/internal/services")}".toString(),
                             "-I${file(libs+"/glfw/include")}".toString(),
                             "-I${file(libs+"/glfw/include/GLFW")}".toString(),
                             "-I${file(libs+"/openssl/include")}".toString(),
                             "-I${file(libs+"/openssl/include/openssl")}".toString(),
                             "-I${file(libs+"/poco/include")}".toString(),
                             "-I${file(libs+"/tess2/include")}".toString(),
                             "-I${file(libs+"/utf8cpp/include")}".toString(),
                             "-I${file(libs+"/utf8cpp/include/utf8")}".toString(),
                             "-I${file(libs+"/json/include")}".toString(),

                             "-I${file(libs+'/kiss/include')}".toString()
                             //                 "-I${file("src/main/jni")}".toString(),
                             //                 "-I${file("src/main/jni/data")}".toString()]
            ])
            ldLibs.addAll(["atomic","android", "OpenSLES", "z", "GLESv1_CM", "GLESv2", "log"
            ])

            stl        = "c++_static"
        }

        /* productFlavors {
             create("x86") {
                 ndk {
                     // You can customize the NDK configurations for each
                     // productFlavors and buildTypes.
                     abiFilters.add("x86")
                 }
             }
             create ("arm7") {
                 ndk.abiFilters.add("armeabi-v7a")
             }
             create("fat") {
                 // If ndk.abiFilters is not configured, the application
                 // compile and package all suppported ABI.
             }
         }*/


        sources {
            main {
                jni {
                    exportedHeaders {
                        srcDirs = [
                                ofSource,
                                "${file(ofSource+"/3d")}".toString(),
                                "${file(ofSource+"/app")}".toString(),
                                "${file(ofSource+"/communication")}".toString(),
                                "${file(ofSource+"/events")}".toString(),
                                "${file(ofSource+"/gl")}".toString(),
                                "${file(ofSource+"/graphics")}".toString(),
                                "${file(ofSource+"/math")}".toString(),
                                "${file(ofSource+"/output")}".toString(),
                                "${file(ofSource+"/sound")}".toString(),
                                "${file(ofSource+"/types")}".toString(),
                                "${file(ofSource+"/utils")}".toString(),
                                "${file(ofSource+"/video")}".toString(),

                                //addons+"/ofxAndroid/src",
                                //addons+"/ofxAccelerometer/src"
                        ]
                    }
                    source {
                        srcDirs =[
                                ofSource,
                                addons+"/ofxAndroid/src",
                                addons+"/ofxAccelerometer/src"
                        ]
                        excludes = [  "**/ofQtUtils.cpp",
                                      "**/ofQuickTimeGrabber.cpp",
                                      "**/ofQuickTimePlayer.cpp",
                                      "**/ofDirectShowGrabber.cpp",
                                      "**/ofDirectShowPlayer.cpp",
                                      "**/ofGstUtils.cpp",
                                      "**/ofGstVideoGrabber.cpp",
                                      "**/ofGstVideoPlayer.cpp",
                                      "**/ofAppGlutWindow.cpp",
                                      "**/ofAppEGLWindow.cpp",
                                      "**/ofAppGLFWWindow.cpp",
                                      "**/ofCairoRenderer.cpp",
                                      "**/ofFmodSoundPlayer.cpp",
                                      "**/ofOpenALSoundPlayer.cpp",
                                      "**/ofRtAudioSoundStream.cpp",

                                      "**/glew/**/*",
                                      "**/poco/include/Poc**/*",
                                      "**/poco/include/CppUni**/*",
                                      "**/poco/include/Poco/**/*",
                                      "**/poco/include/CppUnit/**/*",
                                      "**/quicktime/**/*",
                                      "**/videoInput/**/*",
                                      "**/glu/includ**/*",
                                      "**/fmodex/**/*",
                                      "**/kiss/**/*",
                                      "**/assimp/**/*",
                                      "**/glut/**/*",
                                      "**/portaudio/**/*",
                                      "**/rtAudio/**/*",
                                      "**/poco/lib/**/*",
                                      "**/openssl/lib/**/*",
                                      "**/boost/include/boost/**/*",
                        ]


                    }

                }
            }
        }


    }

    android.productFlavors {
        /*APP_ABIS.each { abi ->
            create(getFlavorName(abi)) {
                ndk {
                    abiFilters.add(abi)
                    getPrebuiltLibPaths(abi, libs).each { path ->
                        ldFlags.add( path.toString())
                    }

                }
            }
        }*/

        create("all") {
            ndk {
                // You can customize the NDK configurations for each
                // productFlavors and buildTypes.
                abiFilters.add("armeabi")
                abiFilters.add("armeabi-v7a")

                getPrebuiltLibPaths("armeabi-v7a", libs).each { path ->
                    ldFlags.add( path.toString())
                }
            }
        }
/*
        create("arm") {
            ndk.abiFilters.add("armeabi")
        }*/
    }
}


def getFlavorName(abi) {
    switch (abi) {
        case "armeabi":
            return "arm";
        case "armeabi-v7a":
            return "arm7"
        case "arm64-v8a":
            return "arm64"
        default:
            return abi.replaceAll('-', '_')
    }
}


def getPrebuiltLibPaths(abi, libs) {
    def paths = []

    paths += file(libs+"/FreeImage/lib/android/armeabi-v7a/libfreeimage.a")
    paths += file(libs+"/boost/lib/android/armeabi-v7a/libboost_filesystem.a")
    paths += file(libs+"/boost/lib/android/armeabi-v7a/libboost_system.a")
    paths += file(libs+"/freetype/lib/android/armeabi-v7a/libfreetype.a")
    paths += file(libs+"/glu/lib/android/armeabi-v7a/libGLU.a")
    paths += file(libs+"/tess2/lib/android/armeabi-v7a/libtess2.a")

    paths += file(libs+"/poco/lib/android/${abi}/libPocoNetSSL.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoNet.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoCrypto.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoJSON.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoMongoDB.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoDataSQLite.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoData.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoUtil.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoXML.a")
    paths += file(libs+"/poco/lib/android/${abi}/libPocoFoundation.a")
    paths += file(libs+"/openssl/lib/android/${abi}/libssl.a")
    paths += file(libs+"/openssl/lib/android/${abi}/libcrypto.a")

    //paths += "-Lboost_system"
    //paths += "-Lboost_filesystem"
    //paths += "-Lrtaudio"
    //paths += "-Lfreeimage"
    return paths
}