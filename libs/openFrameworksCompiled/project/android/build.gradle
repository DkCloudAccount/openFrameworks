def ofRoot = '../../../../'
def ofSource = ofRoot + 'libs/openFrameworks'
def libs = ofRoot + 'libs'


// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.7.0-alpha1'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: "com.android.model.native"

model {
    android {
        compileSdkVersion 23

        ndk {
            moduleName "openFrameworksLib"
            toolchain "clang"


            CFlags.addAll([
                    "-gcc-toolchain /Users/jonas/Library/Android/sdk/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/",

            ])
            cppFlags.addAll(["-std=c++14",
                             "-Wall",
                             "-frtti",
                             "-fexceptions",
                             "-nostdlib ",
                             "-fno-short-enums",
                             "-ffunction-sections",
                             "-fdata-sections",

                             "-I${file(ofSource+"/3d")}".toString(),
                             "-I${file(ofSource+"/app")}".toString(),
                             "-I${file(ofSource+"/communication")}".toString(),
                             "-I${file(ofSource+"/events")}".toString(),
                             "-I${file(ofSource+"/gl")}".toString(),
                             "-I${file(ofSource+"/graphics")}".toString(),
                             "-I${file(ofSource+"/math")}".toString(),
                             "-I${file(ofSource+"/output")}".toString(),
                             "-I${file(ofSource+"/sound")}".toString(),
                             "-I${file(ofSource+"/types")}".toString(),
                             "-I${file(ofSource+"/utils")}".toString(),
                             "-I${file(ofSource+"/video")}".toString(),

                             "-I${file(libs+"/glu/include_android")}".toString(),
                             "-I${file(ofRoot+"/addons/ofxAndroid/src")}".toString(),


                             "-I${file(libs+"/FreeImage/include")}".toString(),
                             "-I${file(libs+"/boost/include")}".toString(),
                             "-I${file(libs+"/boost/include/boost")}".toString(),
                             "-I${file(libs+"/cairo/include")}".toString(),
                             "-I${file(libs+"/cairo/include/cairo")}".toString(),
                             "-I${file(libs+"/freetype/include")}".toString(),
                             "-I${file(libs+"/freetype/include/freetype2")}".toString(),
                             "-I${file(libs+"/freetype/include/freetype2/config")}".toString(),
                             "-I${file(libs+"/freetype/include/freetype2/internal")}".toString(),
                             "-I${file(libs+"/freetype/include/freetype2/internal/services")}".toString(),
                             "-I${file(libs+"/glfw/include")}".toString(),
                             "-I${file(libs+"/glfw/include/GLFW")}".toString(),
                             "-I${file(libs+"/openssl/include")}".toString(),
                             "-I${file(libs+"/openssl/include/openssl")}".toString(),
                             "-I${file(libs+"/poco/include")}".toString(),
                             "-I${file(libs+"/tess2/include")}".toString(),
                             "-I${file(libs+"/utf8cpp/include")}".toString(),
                             "-I${file(libs+"/utf8cpp/include/utf8")}".toString(),
                             "-I${file(libs+"/json/include")}".toString(),

                             "-I${file(libs+'/kiss/include')}".toString()
                             //                 "-I${file("src/main/jni")}".toString(),
                             //                 "-I${file("src/main/jni/data")}".toString()]
            ])
            ldLibs.addAll(["android", "atomic", "EGL", "GLESv2", "OpenSLES", "log", "c++_static"])

            stl        = "c++_static"
        }

        productFlavors {
            create("x86") {
                ndk {
                    // You can customize the NDK configurations for each
                    // productFlavors and buildTypes.
                    abiFilters.add("x86")
                }
            }
            create ("arm7") {
                ndk.abiFilters.add("armeabi-v7a")
            }
            create("fat") {
                // If ndk.abiFilters is not configured, the application
                // compile and package all suppported ABI.
            }
        }


        sources {
            main {
                jni {
                    exportedHeaders {
                        srcDir ofSource
                    }
                    source {
                        srcDirs =[ofSource]
                        excludes = [  "**/ofQtUtils.cpp",
                                      "**/ofQuickTimeGrabber.cpp",
                                      "**/ofQuickTimePlayer.cpp",
                                      "**/ofDirectShowGrabber.cpp",
                                      "**/ofDirectShowPlayer.cpp",
                                      "**/ofGstUtils.cpp",
                                      "**/ofGstVideoGrabber.cpp",
                                      "**/ofGstVideoPlayer.cpp",
                                      "**/ofAppGlutWindow.cpp",
                                      "**/ofAppEGLWindow.cpp",
                                      "**/ofAppGLFWWindow.cpp",
                                      "**/ofCairoRenderer.cpp",
                                      "**/ofFmodSoundPlayer.cpp",
                                      "**/ofOpenALSoundPlayer.cpp",
                                      "**/ofRtAudioSoundStream.cpp",

                                      "**/glew/**/*",
                                      "**/poco/include/Poc**/*",
                                      "**/poco/include/CppUni**/*",
                                      "**/poco/include/Poco/**/*",
                                      "**/poco/include/CppUnit/**/*",
                                      "**/quicktime/**/*",
                                      "**/videoInput/**/*",
                                      "**/glu/includ**/*",
                                      "**/fmodex/**/*",
                                      "**/kiss/**/*",
                                      "**/assimp/**/*",
                                      "**/glut/**/*",
                                      "**/portaudio/**/*",
                                      "**/rtAudio/**/*",
                                      "**/poco/lib/**/*",
                                      "**/openssl/lib/**/*",
                                      "**/boost/include/boost/**/*",
                        ]


                    }
                }
            }
        }
    }
}
